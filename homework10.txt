//ds1307.c
#include <LPC11xx.h>
void I2c_Start();
void I2C_Stop();
void I2C_Send_Byte();
uint8_t I2C_Recieve_Byte();
void Ds1307_WriteByte(uint8_t WriteAddr,uint8_t WriteData);
void DS1307_Write(uint8_t *data);
/*函数功能：DS1307 初始化,默认初始化为全 0*/
void DS1307Init(){
uint8_t time[7]={0x30,0x27,0x21,0x02,0x07,0x02,0x23};//设置时间 2023 年 2 月 7 日星期二 21
时 27 分 30 秒
DS1307_Write(time);
}
void DS1307_Read(uint8_t *data){
Ds1307_WriteByte(0x3f,0x01);//定位 ds1307 内部指针到 0x3f(RAM 尾部)处
I2c_Start();//start
I2C_Send_Byte(0xd1);//读
LPC_I2C->CONSET =(1<<2);//AA=1
data[0]=I2C_Recieve_Byte();
data[1]=I2C_Recieve_Byte();
data[2]=I2C_Recieve_Byte();
data[3]=I2C_Recieve_Byte();
data[4]=I2C_Recieve_Byte();
data[5]=I2C_Recieve_Byte();
LPC_I2C->CONCLR =(1<<2);//AA=0
data[6]=I2C_Recieve_Byte();
I2C_Stop();//STOP
}
/* 函数功能：DS1307 写*/
void DS1307_Write(uint8_t *data){
I2c_Start();//start
I2C_Send_Byte(0xd0);//读
LPC_I2C->CONSET =(1<<2);//AA=1
I2C_Send_Byte(0x00);//从 0x00 开始写入
I2C_Send_Byte(data[0]);
I2C_Send_Byte(data[1]);
I2C_Send_Byte(data[2]);
I2C_Send_Byte(data[3]);
I2C_Send_Byte(data[4]);
I2C_Send_Byte(data[5]);
LPC_I2C->CONCLR =(1<<2);//AA=0
I2C_Send_Byte(data[6]);
I2C_Stop();//STOP
}
/*函数功能：DS1307 写一个字节*/
void Ds1307_WriteByte(uint8_t WriteAddr,uint8_t WriteData)
{
//I2C_Start();
I2c_Start();//start
I2C_Send_Byte(0xd0); // Device Addr + Write (operation)
I2C_Send_Byte(WriteAddr);
LPC_I2C->CONCLR =(1<<2);//AA=0 接受完下一个字节后返回非应答信号
I2C_Send_Byte(WriteData);
I2C_Stop();
}
/* 函数功能：DS1307 读一个字节*/
uint8_t Ds1307_ReadByte()
{
uint8_t RevData;
I2c_Start();//start
I2C_Send_Byte(0xD1); // Device Addr + Write (operation)
LPC_I2C->CONCLR =(1<<2);//AA=0
RevData = I2C_Recieve_Byte();
I2C_Stop();
return RevData;
}
//I2C.c
#include <LPC11xx.h>
/*函数功能：I2C 初始化*/
void I2CInit(){
LPC_SYSCON->PRESETCTRL |= (1<<1); //复位取消
LPC_SYSCON->SYSAHBCLKCTRL |=(1<<5);//使能 I2C
LPC_SYSCON->SYSAHBCLKCTRL |=(1<<16);//使能 IO 配置块
//选择快速模式
LPC_IOCON->PIO0_4 &=~(0X3F); //选择快速模式
LPC_IOCON->PIO0_4 |=0X01;//选择 SCL
LPC_IOCON->PIO0_5 &=~(0X3F); //选择快速模式
LPC_IOCON->PIO0_5 |=0X01;//选择 SDA
//设置 SCL 频率为 400kHZ
LPC_I2C->SCLH=40;
LPC_I2C->SCLL=80;
//使能 I2C 同时将其他控制位清 0
LPC_I2C->CONCLR=0XFF;
LPC_I2C->CONSET |=(1<<6);
}
/*函数功能：发送开始信号*/
void I2c_Start(){
LPC_I2C->CONSET =(1<<5);// 发送开始信号
while(!(LPC_I2C->CONSET&(1<<3))){//等待开始信号发送完成 SI 置位
}
LPC_I2C->CONCLR =(1<<5|1<<3); //清零 START 和 SI
}
/*函数功能：发送停止信号*/
void I2C_Stop(){
LPC_I2C->CONCLR =(1<<3);
LPC_I2C->CONSET =(1<<4);// 发送停止信号
while((LPC_I2C->CONSET&(1<<4))){//等待停止信号发送完成 SI 置位
}
}
/*函数功能：发送一个字节*/
void I2C_Send_Byte(uint8_t data){
LPC_I2C->DAT=data;
LPC_I2C->CONCLR =(1<<3); //开始发送数据 清 SI
while(!(LPC_I2C->CONSET&(1<<3))){//等待数据发送完成 SI 置位
}
}
/*函数功能：接受一个字节*/
uint8_t I2C_Recieve_Byte(){
LPC_I2C->CONCLR =(1<<3);//开始接受数据 清 SI
while(!(LPC_I2C->CONSET&(1<<3))){//等待接受数据完成 SI 置位
}
return (uint8_t)LPC_I2C->DAT;
}
//Tmr16b0.c
#include <LPC11xx.h>
void UART_Send(uint8_t str[],int lenght);
void UART_Send_Bit();
void Delay_1s();
void DS1307_Read(uint8_t *data);
void Ds1307_WriteByte(uint8_t WriteAddr,uint8_t WriteData);
uint8_t Ds1307_ReadByte();
uint8_t buf[100]; //存放温度
void TMR16B0_Init(){//定时器初始化 定时 1s
LPC_SYSCON->SYSAHBCLKCTRL |=(1<<7);//使能 16B0
LPC_TMR16B0->MCR =3; //匹配 MR0 时复位 TC 且中断
LPC_TMR16B0->PR=799; //预分频值 799
//LPC_TMR16B0->PR=1599; //预分频值 1599 定时 2 秒
LPC_TMR16B0->MR0=SystemCoreClock/800; // 设置周期为 1 秒
LPC_TMR16B0->TCR=0X01; //启动定时
NVIC_EnableIRQ(TIMER_16_0_IRQn); //启动中断
}
void TIMER16_0_IRQHandler(){//中断
uint8_t data[7];
DS1307_Read(data);
UART_Send_Bit(0xff); //方便区分
UART_Send(data,7);
UART_Send_Bit(0xff);
LPC_TMR16B0->IR |=0X01; //清中断
}
//UART.c
#include <LPC11xx.h>
uint32_t Rcv_Buf[100]; //存放数据
int buf_i=0;//数据长度
void DS1307_Write(uint8_t *data);
void Delay_1s(void);
void UARTInit(){
//配置引脚
LPC_SYSCON->SYSAHBCLKCTRL |=(1<<16);//使能 IO
LPC_SYSCON->SYSAHBCLKCTRL |=(1<<6) ;//使能 GPIO
LPC_IOCON->PIO1_6 |= 0x01; //设置成 RXD 引脚
LPC_IOCON->PIO1_7 |= 0x01; //设置成 TXD 引脚
LPC_UART->LCR=3; //数据 8 停止 1 无校验
//设置波特率 115384 近似 115200
LPC_SYSCON->SYSAHBCLKCTRL |=(1<<12);//使能 UART
LPC_SYSCON->UARTCLKDIV=4; //设置分频值 4 获得 UART 时钟为 12Mhz
LPC_UART->LCR=0X83; //DLAB=1
LPC_UART->DLL=4;
LPC_UART->DLM=0;
LPC_UART->LCR=0x03; //DLAB=0
LPC_UART->FDR=0X85; //MIV=8 DIV=5
LPC_UART->FCR =0X81; //使能 FIFO 深度设置为 8
LPC_UART->IER |=1<<0; //使能接受中断
NVIC_EnableIRQ(UART_IRQn); //启动中断
}
/*发送字符串*/
void UART_Send(uint8_t str[],int lenght){
int i;
for(i=0;i<lenght;i++){
LPC_UART->THR= str[i];
while((LPC_UART->LSR&0X40)==0);//等待数据发送完成
}
}
/*发送 一个字节*/
void UART_Send_Bit(uint8_t data){
LPC_UART->THR= data;
while((LPC_UART->LSR&0X40)==0);//等待数据发送完成
}
void UART_IRQHandler(){
int i;
uint8_t data[16]={0};
uint8_t adc;
for(i=0;i<16;i++){
data[i]=0x11;
}
switch(LPC_UART->IIR&0X0F){
case 0x04: //RDA
for(i=0;i<8;i++){
Rcv_Buf[buf_i++]=LPC_UART->RBR; //接受数据
}
break;
case 0x0c: //CTI
//每次都只发送 7 组数据，一定会进入 CTI
i=0;
while((LPC_UART->LSR&0X01)==1){
Rcv_Buf[buf_i]=LPC_UART->RBR;//接受数据
data[i]= Rcv_Buf[buf_i];
i++;
buf_i++;
}
DS1307_Write(data);
break;
}
}
//main.c
#include <LPC11xx.h>
void UARTInit();
void Delay_1s(void);
void UART_Send_Bit(uint8_t data);
void UART_Send(uint8_t str[],int lenght);
void TMR16B0_Init();
void I2CInit();
void DS1307Init();
void Delay_1s();
void DS1307_Read(uint8_t *data);
void Led_init(){
LPC_SYSCON->SYSAHBCLKCTRL |= (1<<6); // 使能时钟
LPC_GPIO1->DIR |= (1<<9);
LPC_GPIO1->DATA &= ~(1<<9); //拉低
}
void Delay_1s(){
int i=SystemCoreClock/5;//1s
while(--i);
}
int main(){
SystemInit();// 主时钟设置成 48Mhz
UARTInit();
I2CInit();
Delay_1s();
DS1307Init();
TMR16B0_Init();
while(1){
//UART_Send("11");
}