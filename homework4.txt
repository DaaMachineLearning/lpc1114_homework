//第一题
#include "lpc11xx.h" // 包含LPC11xx的头文件
void LED_init(void) // LED初始化函数
{
LPC_SYSCON->SYSAHBCLKCTRL |= (1UL << 6); // 使能GPIO的时钟
LPC_GPIO1->DIR |= (1UL << 9); // GPIO1.9设置为输出模式
LPC_GPIO1->DATA &= ~(1UL << 9); // GPIO1.9输出低电平
}
void LED_Toggle(void) // LED闪烁函数
{
LPC_GPIO1->DATA ^= (1UL << 9); // 取反GPIO1.9的输出电平
}
void TMR16B1_COUNT_Init(void) // 16位定时器初始化函数
{
LPC_SYSCON->SYSAHBCLKCTRL |= (1UL << 8); // 使能定时器的时钟
LPC_TMR16B1->IR = 0x1F; // 定时器中断标志寄存器清零
LPC_TMR16B1->PR = 999; // 定时器分频系数为1000
LPC_TMR16B1->MCR = 3; // 匹配后TC复位并中断
LPC_TMR16B1->MR0 = SystemCoreClock / 1000; // 定时器的匹配寄存器设为1ms
LPC_TMR16B1->TCR = 0x01; // 使能定时器
NVIC_EnableIRQ(TIMER_16_1_IRQn); // 使能定时器中断
}
void TIMER16_1_IRQHandler(void) // 定时器中断处理函数
{
if ((LPC_TMR16B1->IR |= 0x01) == 1) // 判断是否为定时器匹配中断
LED_Toggle(); // LED闪烁
}
int main() // 主函数
{
LED_init(); // 调用LED初始化函数
TMR16B1_COUNT_Init(); // 调用定时器初始化函数
while(1); // 一直循环
return 0; // 返回0
}
//第二题
#include "lpc11xx.h"
int flag=1;   //flag 加减标志
float x=0;   //占空比
void LED_init(void)   //LED initial
{
  LPC_SYSCON->SYSAHBCLKCTRL |= (1UL <<  6);  /* enable clock for GPIO  */
  /* configure GPIO1.9 as output */
  LPC_GPIO1->DIR  |=  (1UL << 9);
//PC_GPIO1->DATA &= ~(1UL << 9);
}
void TMR16B1_PWM_Init(void)  /*16位定时器1初始化*/
{
  LPC_SYSCON->SYSAHBCLKCTRL |= (1UL << 8);//16位定时器1使能
  LPC_SYSCON->SYSAHBCLKCTRL |= (1UL << 16);//开启时钟
  LPC_IOCON->PIO1_9 |= 0x01;  //P1_9复用为mat0
  LPC_TMR16B1->PR = 0;  //分频1
  LPC_TMR16B1->PWMC= 0x01;  //MAT0为PWM模式
  LPC_TMR16B1->MCR = 0x02 <<9;  //匹配后TC复位且不中断
  LPC_TMR16B1->MR3 = SystemCoreClock/1000;  //MR3 1ms通道3计时
  LPC_TMR16B1->MR0 = LPC_TMR16B1->MR3;//输出
  LPC_TMR16B1->TCR = 0x01;  //使能定时器1
}
void TMR32B0_Init(void){  /*32位定时器0初始化*/
  LPC_SYSCON->SYSAHBCLKCTRL|=(1UL<<9);   //使能
  LPC_TMR32B0->IR=0x1F;  //中断清0
  LPC_TMR32B0->PR=0;  //分频1
  LPC_TMR32B0->MCR=3;  //匹配后复位TC并中断
  LPC_TMR32B0->MR0=SystemCoreClock/10;  //中断时间0.1s
  LPC_TMR32B0->TCR=0x01;   //使能定时器
  NVIC_EnableIRQ(TIMER_32_0_IRQn);  //设置中断并使能
}
void TIMER32_0_IRQHandler(void){  //中断子程序
  if((LPC_TMR32B0->IR|=0x01)==1){  //判断MR0是否中断并清零中断
  if(x<=0.13)  //周期改变占空比x<0.13则不断增加占空比，到达0.92后不断减少
  flag=1;
  else if(x>=0.92)
  flag=0;
  if(flag==1)  //经过不断实验调试发现此数值能得到较好的呼吸灯结果
  x=x+0.05;
  else if(flag==0)
  x=x-0.05;
  }
}
int main()
{
  LED_init();
  TMR32B0_Init();
  TMR16B1_PWM_Init();
  while(1)
  {
   LPC_TMR16B1->MR0 = x*LPC_TMR16B1->MR3;  //不同占空比输出
  }
}